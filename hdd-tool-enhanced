#!/bin/bash
# HDD Tool - Enhanced Linux Launcher with Rust Installation
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BINARY_PATH="$SCRIPT_DIR/target/release/hdd_tool"
PREBUILT_BINARY="$SCRIPT_DIR/bin/hdd_tool"

echo "🛡️  HDD Tool v0.1.0 - NIST SP 800-88 Compliant Disk Sanitization"
echo "================================================"

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    print_warning "HDD Tool requires root privileges to access storage devices"
    print_info "Restarting with sudo..."
    exec sudo "$0" "$@"
fi

# Function to install Rust
install_rust() {
    print_info "Rust not found. Installing Rust..."
    
    # Check if we're running as root (need to install for original user)
    if [[ -n "$SUDO_USER" ]]; then
        print_info "Installing Rust for user: $SUDO_USER"
        sudo -u "$SUDO_USER" bash -c 'curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y'
        sudo -u "$SUDO_USER" bash -c 'source ~/.cargo/env && rustup default stable && rustc --version'
        print_success "Rust installed and configured successfully"
        return 0
    else
        print_warning "Running as root. Installing Rust system-wide..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
        rustup default stable
        print_success "Rust installed and configured successfully"
        return 0
    fi
}

# Function to check and configure Rust toolchain
check_rust_toolchain() {
    if command -v cargo &> /dev/null; then
        # Check if default toolchain is configured
        if ! rustup default &> /dev/null 2>&1; then
            print_warning "Rust toolchain not configured. Setting up default stable..."
            if [[ -n "$SUDO_USER" ]]; then
                sudo -u "$SUDO_USER" bash -c 'source ~/.cargo/env && rustup default stable && rustup update stable'
            else
                source ~/.cargo/env
                rustup default stable
                rustup update stable
            fi
            print_success "Rust toolchain configured"
        fi
    fi
}

# Function to check for pre-built binary
check_prebuilt() {
    if [[ -f "$PREBUILT_BINARY" ]]; then
        print_info "Using pre-built binary"
        chmod +x "$PREBUILT_BINARY"
        exec "$PREBUILT_BINARY" "$@"
    fi
}

# Function to build project
build_project() {
    cd "$SCRIPT_DIR"
    
    if [[ ! -f "Cargo.toml" ]]; then
        print_error "This doesn't appear to be the HDD Tool project directory"
        print_info "Make sure you're running this from the extracted package directory"
        exit 1
    fi
    
    print_info "Building HDD Tool from source..."
    
    # Build as original user if using sudo
    if [[ -n "$SUDO_USER" ]]; then
        sudo -u "$SUDO_USER" bash -c 'source ~/.cargo/env && cargo build --release'
    else
        source ~/.cargo/env
        cargo build --release
    fi
    
    if [[ ! -f "$BINARY_PATH" ]]; then
        print_error "Build failed or binary not created"
        exit 1
    fi
    
    print_success "Build completed successfully"
}

# Main execution logic

# First, check for pre-built binary
check_prebuilt

# Check if built binary exists
if [[ -f "$BINARY_PATH" ]]; then
    print_info "Using existing binary"
    chmod +x "$BINARY_PATH"
    exec "$BINARY_PATH" "$@"
fi

# Check for Rust installation
if ! command -v cargo &> /dev/null; then
    print_warning "Rust/Cargo not found"
    
    # Ask user if they want to install Rust
    echo ""
    print_info "HDD Tool needs to be built from source, which requires Rust."
    print_info "Options:"
    echo "  1. Auto-install Rust and build (recommended)"
    echo "  2. Install Rust manually and run again"
    echo "  3. Exit and install dependencies manually"
    echo ""
    
    if [[ -t 0 ]]; then  # Check if running interactively
        read -p "Choose option (1-3) [1]: " -n 1 -r
        echo
        REPLY=${REPLY:-1}
    else
        REPLY=1  # Default to auto-install in non-interactive mode
    fi
    
    case $REPLY in
        1)
            install_rust
            build_project
            ;;
        2)
            print_info "Please install Rust manually:"
            echo "  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
            echo "  source ~/.cargo/env"
            echo "  ./hdd-tool"
            exit 0
            ;;
        3)
            print_info "Manual installation instructions:"
            echo ""
            echo "1. Install Rust:"
            echo "   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
            echo "   source ~/.cargo/env"
            echo ""
            echo "2. Install system dependencies:"
            echo "   sudo apt update && sudo apt install hdparm util-linux build-essential"
            echo ""
            echo "3. Run HDD Tool:"
            echo "   ./hdd-tool"
            exit 0
            ;;
        *)
            print_error "Invalid option"
            exit 1
            ;;
    esac
else
    # Rust is available, check toolchain configuration
    check_rust_toolchain
    build_project
fi

# Run the application
print_info "Starting HDD Tool..."
print_warning "WARNING: This tool performs irreversible data destruction!"
print_warning "Verify target devices before proceeding!"
echo

chmod +x "$BINARY_PATH"
exec "$BINARY_PATH" "$@"