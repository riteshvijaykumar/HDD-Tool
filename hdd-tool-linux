#!/bin/bash

# HDD Tool - Linux Executable Launcher
# This script serves as the main entry point for the HDD Tool on Linux systems
# Copyright © 2025 SIH Team

set -e

# Configuration
APP_NAME="HDD Tool"
VERSION="0.1.0"
BINARY_NAME="hdd_tool"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check system requirements
check_requirements() {
    print_info "Checking system requirements..."
    
    local missing_deps=()
    
    # Check for Rust/Cargo
    if ! command -v cargo &> /dev/null; then
        missing_deps+=("rust-cargo")
        print_warning "Rust/Cargo not found"
    fi
    
    # Check for required system tools
    if ! command -v hdparm &> /dev/null; then
        missing_deps+=("hdparm")
        print_warning "hdparm not found"
    fi
    
    if ! command -v lsblk &> /dev/null; then
        missing_deps+=("util-linux")
        print_warning "util-linux not found"
    fi
    
    # Check for build dependencies
    if ! command -v gcc &> /dev/null && ! command -v clang &> /dev/null; then
        missing_deps+=("build-essential")
        print_warning "C compiler not found"
    fi
    
    if ! command -v pkg-config &> /dev/null; then
        missing_deps+=("pkg-config")
    fi
    
    # Display missing dependencies
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_warning "Missing dependencies detected:"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        
        print_info "Install missing dependencies:"
        if command -v apt-get &> /dev/null; then
            echo "  sudo apt-get update && sudo apt-get install -y ${missing_deps[*]}"
        elif command -v dnf &> /dev/null; then
            echo "  sudo dnf install -y ${missing_deps[*]}"
        elif command -v yum &> /dev/null; then
            echo "  sudo yum install -y ${missing_deps[*]}"
        elif command -v zypper &> /dev/null; then
            echo "  sudo zypper install -y ${missing_deps[*]}"
        fi
        
        read -p "Would you like to continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        print_success "All dependencies satisfied"
    fi
}

# Function to check if running as root when needed
check_privileges() {
    if [[ "$1" == "run" && $EUID -ne 0 ]]; then
        print_warning "HDD Tool requires root privileges to access storage devices"
        print_info "Restarting with sudo..."
        exec sudo "$0" "$@"
    fi
}

# Function to build the project
build_project() {
    print_info "Building $APP_NAME..."
    
    # Change to project directory
    cd "$PROJECT_ROOT"
    
    # Check if Cargo.toml exists
    if [[ ! -f "Cargo.toml" ]]; then
        print_error "Cargo.toml not found. Make sure you're in the project root directory."
        exit 1
    fi
    
    # Build in release mode
    print_info "Compiling in release mode..."
    if cargo build --release; then
        print_success "Build completed successfully"
        
        # Check if binary was created
        if [[ -f "target/release/$BINARY_NAME" ]]; then
            print_success "Binary created: target/release/$BINARY_NAME"
            return 0
        else
            print_error "Binary not found after build"
            return 1
        fi
    else
        print_error "Build failed"
        return 1
    fi
}

# Function to run the application
run_application() {
    local binary_path="$PROJECT_ROOT/target/release/$BINARY_NAME"
    
    # Check if binary exists
    if [[ ! -f "$binary_path" ]]; then
        print_warning "Binary not found at $binary_path"
        print_info "Attempting to build..."
        if ! build_project; then
            print_error "Failed to build project"
            exit 1
        fi
    fi
    
    # Make sure binary is executable
    chmod +x "$binary_path"
    
    print_info "Starting $APP_NAME..."
    print_warning "Remember: This tool performs irreversible data destruction!"
    print_warning "Always verify target devices before proceeding!"
    
    # Run the application
    exec "$binary_path" "$@"
}

# Function to install system-wide
install_system() {
    print_info "Installing $APP_NAME system-wide..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        print_error "Installation requires root privileges"
        print_info "Run: sudo $0 install"
        exit 1
    fi
    
    # Build first if needed
    local binary_path="$PROJECT_ROOT/target/release/$BINARY_NAME"
    if [[ ! -f "$binary_path" ]]; then
        print_info "Building project first..."
        # Temporarily drop privileges for build
        sudo -u "$SUDO_USER" bash -c "cd '$PROJECT_ROOT' && cargo build --release"
    fi
    
    # Install binary
    cp "$binary_path" "/usr/local/bin/$BINARY_NAME"
    chmod +x "/usr/local/bin/$BINARY_NAME"
    
    # Install desktop file if it exists
    if [[ -f "$PROJECT_ROOT/hdd-tool.desktop" ]]; then
        cp "$PROJECT_ROOT/hdd-tool.desktop" "/usr/share/applications/"
    fi
    
    # Install icon if it exists
    if [[ -f "$PROJECT_ROOT/resources/logo.png" ]]; then
        cp "$PROJECT_ROOT/resources/logo.png" "/usr/share/pixmaps/hdd-tool.png"
    fi
    
    # Install documentation
    mkdir -p "/usr/share/doc/hdd-tool"
    if [[ -f "$PROJECT_ROOT/LICENSE" ]]; then
        cp "$PROJECT_ROOT/LICENSE" "/usr/share/doc/hdd-tool/"
    fi
    if [[ -f "$PROJECT_ROOT/CROSS_PLATFORM_README.md" ]]; then
        cp "$PROJECT_ROOT/CROSS_PLATFORM_README.md" "/usr/share/doc/hdd-tool/README.md"
    fi
    
    # Update desktop database
    if command -v update-desktop-database &> /dev/null; then
        update-desktop-database /usr/share/applications
    fi
    
    print_success "$APP_NAME installed successfully!"
    print_info "You can now run: sudo $BINARY_NAME"
    print_info "Or find it in your applications menu"
}

# Function to uninstall
uninstall_system() {
    print_info "Uninstalling $APP_NAME..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        print_error "Uninstallation requires root privileges"
        print_info "Run: sudo $0 uninstall"
        exit 1
    fi
    
    # Remove files
    rm -f "/usr/local/bin/$BINARY_NAME"
    rm -f "/usr/share/applications/hdd-tool.desktop"
    rm -f "/usr/share/pixmaps/hdd-tool.png"
    rm -rf "/usr/share/doc/hdd-tool"
    
    # Update desktop database
    if command -v update-desktop-database &> /dev/null; then
        update-desktop-database /usr/share/applications
    fi
    
    print_success "$APP_NAME uninstalled successfully!"
}

# Function to show help
show_help() {
    cat << EOF
$APP_NAME v$VERSION - Linux Executable Launcher

USAGE:
    $0 [COMMAND] [OPTIONS]

COMMANDS:
    run, start          Run the HDD Tool application (default)
    build, compile      Build the project from source
    install             Install system-wide (requires sudo)
    uninstall           Remove system installation (requires sudo)
    check, deps         Check system dependencies
    clean               Clean build artifacts
    help, --help, -h    Show this help message

EXAMPLES:
    $0                  # Run the application
    $0 run              # Run the application
    $0 build            # Build from source
    sudo $0 install     # Install system-wide
    sudo $0 uninstall   # Uninstall

REQUIREMENTS:
    - Linux x86_64 system
    - Rust/Cargo for building
    - hdparm package (for SSD secure erase)
    - util-linux package (for disk utilities)
    - Root privileges for disk access

SECURITY WARNING:
    This tool performs irreversible data destruction. Always verify
    target devices and maintain appropriate backups before use.

For more information, see the documentation in the project directory.

Copyright © 2025 SIH Team
Licensed under MIT License
EOF
}

# Function to clean build artifacts
clean_project() {
    print_info "Cleaning build artifacts..."
    cd "$PROJECT_ROOT"
    
    if command -v cargo &> /dev/null; then
        cargo clean
        print_success "Build artifacts cleaned"
    else
        print_warning "Cargo not available, removing target directory manually"
        rm -rf target/
        print_success "Target directory removed"
    fi
}

# Main execution logic
main() {
    # Show banner
    echo "========================================"
    echo "  $APP_NAME v$VERSION"
    echo "  NIST SP 800-88 Compliant Disk Sanitization"
    echo "========================================"
    echo
    
    # Parse command line arguments
    case "${1:-run}" in
        "run"|"start"|"")
            check_privileges "$@"
            check_requirements
            run_application "${@:2}"
            ;;
        "build"|"compile")
            check_requirements
            build_project
            ;;
        "install")
            install_system
            ;;
        "uninstall")
            uninstall_system
            ;;
        "check"|"deps")
            check_requirements
            ;;
        "clean")
            clean_project
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"